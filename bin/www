#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require("../app");
const debug = require("debug")("cypher-text:server");
const http = require("http");
const db = require("../models");
const server = http.createServer(app);
const io = require("socket.io")(server);

/**
 * Create HTTP server.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== "listen") {
        throw error;
    }

    var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case "EACCES":
            console.error(bind + " requires elevated privileges");
            process.exit(1);
            break;
        case "EADDRINUSE":
            console.error(bind + " is already in use");
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
    debug("Listening on " + bind);
    console.log("Listening on " + bind);
}

/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

//setup connection listener for socket.io
io.on("connection", socket => {
    console.log(`A user has connected with socket id: ${socket.id}`);
    socket.on("disconnect", () => {
        console.log(`A user has disconnected with socket id: ${socket.id}`);
    });

    socket.on("broadcast-room", data => {
        socket.join(data);
        io.to(data).emit("joined-room", data);
        console.log(`A user has joined room ID: ${data}`);
        console.log(io.sockets.adapter.rooms[roomID]); //can be used to check if room exists so someone can join
    });
});

/**
 * Listen on provided port, on all network interfaces.
 */
db.sequelize
    .authenticate()
    .then(() => {
        server.listen(port);
        server.on("error", onError);
        server.on("listening", onListening);

        db.sequelize
            .sync({ force: false })
            .then(() => {
                console.log(
                    "All table have been successfully created, if one doesn't already exist"
                );
            })
            .catch(err => {
                console.log("This error occurred", err);
            });
    })
    .catch(err => {
        console.error("Unable to connect to the database:", err);
    });
/**
 * Normalize a port into a number, string, or false.
 */
